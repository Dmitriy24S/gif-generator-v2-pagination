{"version":3,"sources":["App.js","index.js"],"names":["App","useState","dataArray","setDataArray","value","setvalue","isLoading","setIsLoading","isError","setIsError","currentPage","setCurrentPage","itemsPerPage","dataFetchLimit","setDataFetchLimit","pageNumbers","offsetArr","i","Math","ceil","push","fetchGifs","offsetNumber","a","fetch","response","ok","console","log","json","data","Error","status","className","type","onClick","onSubmit","e","preventDefault","onChange","target","placeholder","required","pattern","map","pageNumber","pageIndex","classes","href","size","gif","src","images","fixed_height","url","alt","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAgIeA,MA7Hf,WAaE,IAZA,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,UAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEA,EAAsCR,mBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAwCV,mBAAS,IAAjD,mBAAOW,EAAP,KAEA,GAFA,KAE4CX,mBAAS,IAArD,mBAAOY,EAAP,KAAuBC,EAAvB,KACMC,EAAc,GACdC,EAAY,CAAC,GAEVC,EAAI,EAAGA,GAAKC,KAAKC,KAAKN,EAAiBD,GAAeK,IAC7DF,EAAYK,KAAKH,GACjBD,EAAUI,KAAKR,EAAeK,GAGhC,IAAMI,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBhB,GAAa,GACbE,GAAW,GAFK,kBAKSe,MAAM,uFAAD,OAC6DZ,EAD7D,mBACoFU,EADpF,cACsGlB,IANpH,YAKRqB,EALQ,QAQDC,GARC,wBAUZC,QAAQC,IAAI,CAAEN,iBAVF,UAWOG,EAASI,OAXhB,QAWNC,EAXM,OAYZ3B,EAAa2B,EAAKA,MAClBhB,EAAkB,KAbN,8BAeN,IAAIiB,MAAMN,EAASO,QAfb,0DAkBdvB,GAAW,GACXkB,QAAQC,IAAR,MAnBc,QAqBhBrB,GAAa,GArBG,0DAAH,sDAiCf,OAAIC,EAEA,sBAAKyB,UAAU,QAAf,uDAEE,wBACEC,KAAK,SACLD,UAAU,QACV,aAAW,QACXE,QAAS,WACP1B,GAAW,IALf,SAQE,sBAAM,cAAY,OAAlB,uBAON,sBAAKwB,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,8BACA,uBAAMG,SA1BW,SAACC,GACpBA,EAAEC,iBACFjB,EAAU,IAwBR,UACE,uBACEa,KAAK,OACL9B,MAAOA,EACPmC,SAlCa,SAACF,GACpBhC,EAASgC,EAAEG,OAAOpC,QAkCZqC,YAAY,cACZC,UAAQ,EACRC,QAAQ,WAEV,+CAEF,8BACE,6BACG5B,EAAY6B,KAAI,SAACC,EAAYC,GAC5B,IAAIC,EAAU,aAId,OAHIF,IAAenC,IACjBqC,GAAW,UAGX,oBAEEd,UAAWc,EACXZ,QAAS,WACPxB,EAAekC,GACfxB,EAAUL,EAAU8B,KALxB,SAQE,mBAAGE,KAAK,IAAIf,UAAU,YAAtB,SACGY,KAREC,UAedxC,GACC,qBAAK2B,UAAU,SAAf,SACE,cAAC,IAAD,CAAagB,KAAM,QAGvB,qBAAKhB,UAAU,UAAf,SACG/B,EAAU0C,KAAI,SAACM,GACd,OACE,qBAAKjB,UAAU,OAAf,SACE,qBAAKkB,IAAKD,EAAIE,OAAOC,aAAaC,IAAKC,IAAI,MADlBL,EAAIM,aCjH3CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2aee9a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { BiLoaderAlt } from \"react-icons/bi\";\n\nfunction App() {\n  const [dataArray, setDataArray] = useState([]);\n  const [value, setvalue] = useState(\"forest\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n\n  const [dataFetchLimit, setDataFetchLimit] = useState(0);\n  const pageNumbers = [];\n  const offsetArr = [0];\n\n  for (let i = 1; i <= Math.ceil(dataFetchLimit / itemsPerPage); i++) {\n    pageNumbers.push(i);\n    offsetArr.push(itemsPerPage * i);\n  }\n\n  const fetchGifs = async (offsetNumber) => {\n    setIsLoading(true);\n    setIsError(false);\n    try {\n      // const response = await fetch(GIPHY_API + value);\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=tAEFUgagRjRNkU24orQdFB8EHMcNTUSe&limit=${itemsPerPage}&offset=${offsetNumber}&q=${value}`\n      );\n      if (response.ok) {\n        // console.log(response);\n        console.log({ offsetNumber });\n        const data = await response.json();\n        setDataArray(data.data);\n        setDataFetchLimit(100);\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      setIsError(true);\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  const handleChange = (e) => {\n    setvalue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetchGifs(0);\n  };\n\n  if (isError) {\n    return (\n      <div className=\"error\">\n        Unable to get Gifs, please try again later\n        <button\n          type=\"button\"\n          className=\"close\"\n          aria-label=\"Close\"\n          onClick={() => {\n            setIsError(false);\n          }}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Gif Generator v2</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={handleChange}\n          placeholder=\"Search gifs\"\n          required\n          pattern=\"\\S+.*\"\n        />\n        <button>Search</button>\n      </form>\n      <nav>\n        <ul>\n          {pageNumbers.map((pageNumber, pageIndex) => {\n            let classes = \"page-item \";\n            if (pageNumber === currentPage) {\n              classes += \"active\";\n            }\n            return (\n              <li\n                key={pageIndex}\n                className={classes}\n                onClick={() => {\n                  setCurrentPage(pageNumber);\n                  fetchGifs(offsetArr[pageIndex]);\n                }}\n              >\n                <a href=\"#\" className=\"page-link\">\n                  {pageNumber}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      {isLoading && (\n        <div className=\"loader\">\n          <BiLoaderAlt size={100} />\n        </div>\n      )}\n      <div className=\"results\">\n        {dataArray.map((gif) => {\n          return (\n            <div className=\"item\" key={gif.id}>\n              <img src={gif.images.fixed_height.url} alt=\"\" />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}